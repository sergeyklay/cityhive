# Continuous Integration Workflow for CityHive.
#
# This workflow checks code style, runs linters and runs automated tests and
# quality checks for Python project on every push to main and pull
# requests to ensure code quality and reliability.

name: CI

on:
  push:
    branches:
      # This is to make sure that there is no broken CI on
      # the main branch, and also for Sonarqube integration
      - main
  # We need it for better Sonarqube integration
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PYTHONUNBUFFERED: "1"

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest

    # The maximum number of minutes to let a workflow run
    # before GitHub automatically cancels it. Default: 360
    timeout-minutes: 30

    strategy:
      # When set to true, GitHub cancels
      # all in-progress jobs if any matrix job fails.
      fail-fast: false

      matrix:
        python:
          - "3.12"

    concurrency:
      # Cancel any currently running job or workflow in the same concurrency group.
      # The group is a unique identifier for the workflow run.
      #
      # Explanation:
      # - github.workflow: The name of the workflow (e.g. Workflow 1).
      # - github.event.pull_request.number: The number of the pull request (when the trigger event is a PR).
      # - github.ref: The branch name (when the trigger is not a PR but a push).
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv + Python ${{ matrix.python }}
        id: setup-uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python }}
          enable-cache: true
          cache-dependency-glob: |
            pyproject.toml
            uv.lock

      - name: Install dependencies
        run: uv sync --locked --all-groups --all-packages

      - name: Check code formatting
        run: make format-check

      - name: Run linter
        run: make lint

      - name: Run unit tests with coverage
        run: |
          make test-unit
          make ccov

      - name: Start PostgreSQL services
        run: |
          docker compose up -d cityhive_db
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          timeout=60
          while ! docker compose exec -T cityhive_db pg_isready -U cityhive -d cityhive; do
            sleep 2
            timeout=$((timeout - 2))
            if [ $timeout -le 0 ]; then
              echo "PostgreSQL failed to start within 60 seconds"
              docker compose logs cityhive_db
              exit 1
            fi
          done
          echo "PostgreSQL is ready"
        env:
          APP_ENV: testing

      - name: Run database migrations
        run: make migrate
        env:
          # DATABASE_URI: postgresql+asyncpg://cityhive:cityhive@localhost:5432/cityhive_test
          APP_ENV: testing

      - name: Run integration tests
        run: make test-integration
        env:
          # DATABASE_URI: postgresql+asyncpg://cityhive:cityhive@localhost:5432/cityhive_test
          APP_ENV: testing

      - name: Stop PostgreSQL services
        if: always()
        run: docker compose down

      - name: Upload test results to Codecov
        uses: codecov/test-results-action@v1
        if: always()
        with:
          fail_ci_if_error: false
          name: codecov-umbrella
          flags: unittests
          env_vars: OS,PYTHON
          files: ./coverage/xml/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5.4.0
        if: success()
        with:
          fail_ci_if_error: false
          name: codecov-umbrella
          flags: unittests
          env_vars: OS,PYTHON
          files: ./coverage/xml/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
