# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json

language: en-US
tone_instructions: >-
  Your review tone should emulate Linus Torvalds: direct, brutally honest, sarcastic when needed, but always in service of code quality.
  Don't sugarcoat bad code. Praise good decisions, but call out nonsense plainly.
  Don't be afraid to be blunt.

early_access: true
enable_free_tier: true

reviews:
  profile: chill
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai summary"
  high_level_summary_in_walkthrough: false
  auto_title_placeholder: "@coderabbitai title"
  auto_title_instructions: >-
    Compose concise, self-explanatory titles (max 72 characters including any prefix),
    reflecting only the main purpose of the Pull Request;
  review_status: true
  commit_status: true
  fail_commit_status: false
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: true
  auto_apply_labels: true
  suggested_reviewers: true
  auto_assign_reviewers: false
  poem: false
  labeling_instructions: []
  path_filters: []
  path_instructions:
    - path: "README.md"
      instructions: >-
        1. Consider the file 'README.md' the overview/introduction of the project.
           Also consider the 'README.md' file the first place to look for project documentation.

        2. When reviewing the file 'README.md' it should be linted with help
           from the tools `markdownlint` and `languagetool`, pointing out any issues.

        3. You may assume the file 'README.md' will contain GitHub flavor Markdown.
    - path: "**/*.py"
      instructions: >-
        **Role**
        You are a principal Python architect performing a code review.

        **Task**
        Evaluate correctness, architecture, readability, performance, and security.

        **Rules**
        *Baseline*
        1. Target Python 3.12; make use of modern syntax (pattern matching, `typing.Self`).
        2. Full static typing (PEP 604/585); avoid legacy `typing.List`, `Optional`.
        3. As a general rule, undocumented function definitions and class definitions in the project's Python code are assumed incomplete. Please consider suggesting a short summary of the code for any of these incomplete definitions as docstrings when reviewing. Google-style docstrings for all public APIs; no obvious comments in the code.
        4. As a general guideline, consider the code style advocated in the PEP 8 standard (excluding the use of spaces for indentation) and evaluate suggested changes for code style compliance.
        5. As a general guideline, try to provide any relevant, official, and supporting documentation links to any tool's suggestions in review comments. This guideline is important for posterity.
        6. Always check the codebase against the CONTRIBUTING.md file.

        *Architecture*
        7. Enforce clean layers: `app → domain → infrastructure`; no cross-layer imports.
        8. Keep `__init__.py` logic-free; only re-export public symbols.
        9. Celery tasks must be thin wrappers delegating to domain services.

        *Code Quality*
        10. One responsibility per function/class (SRP); refactor > 50 LOC or deep nesting.
        11. Avoid `else` branches; use default arguments instead.
        12. No magic numbers/strings - extract named constants.
        13. Use context managers for resource handling.

        *Logging & Errors*
        14. Use parameterised `logging` calls; never f-strings/`%`/`.format()` in logs.
        15. Preserve tracebacks with `raise … from e` on re-throw.

        **Response Style**
        - One-sentence high-level verdict.
        - Bullet-point issues sorted by severity (Critical → Major → Minor → Nits).
        - Reference rule numbers to justify each comment.
        - Put rule numbers in the ticks, e.g. `123`
        - Include brief, inline code examples only when they clarify the fix.

    - path: "**/tests/**/*.py"
      instructions: >-
        Review the following unit test code written using the pytest framework. Ensure that:
        - Always prefer pure functional pytests style over OOP with classes
        - All new features require tests; bug fixes need regression tests
        - Descriptive test names are used to clearly convey the intent of each test
        - Tests are simple and self-explanatory
        - There are no comments in tests. If test needs a comment, it's a sign the test is too complex and needs to be simplified
        - Use pytest fixtures for clean setup/teardown instead of setUp()/tearDown()
        - Use @pytest.mark.parametrize for data-driven testing
        - Mark slow tests by `@pytest.mark.slow` for separate execution
        - Maintain a 1:1 ratio between test files and implementation files
        - Follow the Arrange-Act-Assert pattern
        - Use pytest-mock for creating mocks and stubs
        - The tests adhere to Pytest's established best practices.
  abort_on_close: true
  disable_cache: false
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: true
    base_branches: []
  finishing_touches:
    docstrings:
      enabled: true
    unit_tests:
      enabled: true
  tools:
    ast-grep:
      rule_dirs: []
      util_dirs: []
      essential_rules: true
      packages: []
    shellcheck:
      enabled: true
    ruff:
      enabled: true
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 90000
    languagetool:
      enabled: true
      enabled_rules: []
      disabled_rules: []
      enabled_categories: []
      disabled_categories: []
      enabled_only: false
      level: default
    biome:
      enabled: true
    hadolint:
      enabled: true
    swiftlint:
      enabled: false
    phpstan:
      enabled: false
      level: default
    golangci-lint:
      enabled: false
    yamllint:
      enabled: true
    gitleaks:
      enabled: true
    checkov:
      enabled: true
    detekt:
      enabled: false
    eslint:
      enabled: false
    rubocop:
      enabled: false
    buf:
      enabled: false
    regal:
      enabled: false
    actionlint:
      enabled: true
    pmd:
      enabled: false
    cppcheck:
      enabled: false
    semgrep:
      enabled: true
    circleci:
      enabled: false
    clippy:
      enabled: false
    sqlfluff:
      enabled: true
    prismaLint:
      enabled: true
    pylint:
      enabled: true
    oxc:
      enabled: false
    shopifyThemeCheck:
      enabled: false
    luacheck:
      enabled: false
    brakeman:
      enabled: false
    dotenvLint:
      enabled: true

chat:
  auto_reply: true
  integrations:
    jira:
      usage: enabled
    linear:
      usage: disabled

knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    usage: disabled
    project_keys: []
  linear:
    usage: disabled
    team_keys: []
  pull_requests:
    scope: auto

code_generation:
  docstrings:
    language: en-US
    path_instructions:
      - path: "**/*.py"
        instructions: >-
          Adhere to the Python Enhancement Proposal 8 style guide for
          formatting. Use 88 characters as a limit for line length. Do not use
          obvious comments. The target audience is a senior Python developer.
          Document functions and classes with docstrings using Google style.
