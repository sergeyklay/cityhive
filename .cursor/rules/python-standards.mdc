---
description: Python Coding Standards
globs: **/*.py
alwaysApply: false
---
# Python Coding Standards

**For Python files:** Follow these standards for consistent, maintainable code.

## Type System

- **Type hints required** on all functions and class methods
- **Use modern syntax**: `list[str]` not `List[str]`, `str | None` not `Optional[str]`
- **Avoid `Any` type** - use specific types or protocols

```python
# ✅ DO:
def process_items(items: list[dict[str, str]]) -> list[str]:
    return [item["name"] for item in items]

# ❌ DON'T:
def process_items(items):
    return [item["name"] for item in items]
```

## Code Style

- **Line length**: 88 characters maximum (Ruff default)
- **Function structure**: Guard clauses first, happy path last
- **Naming**: Descriptive names, no abbreviations (`user_count` not `uc`)
- **Comprehensions**: Prefer over loops when readable

```python
# ✅ DO: Guard clauses first
def calculate_discount(price: float, user_type: str) -> float:
    if price <= 0:
        raise ValueError("Price must be positive")
    if user_type not in ["premium", "standard"]:
        raise ValueError("Invalid user type")

    # Happy path
    return price * (0.1 if user_type == "premium" else 0.05)
```

## Error Handling

- **Specific exceptions**: `ValueError`, `TypeError` over generic `Exception`
- **Error chaining**: Use `raise ... from err` for context
- **Early returns**: Handle errors at function start

```python
# ✅ DO:
try:
    result = risky_operation()
except APIError as e:
    raise ProcessingError("Failed to process data") from e
```

## Logging

- **Never use `print()`** - use logging module
- **No f-strings in log messages** - use % formatting or extra dict
- **Structured logging** for complex data

```python
# ✅ DO:
import logging
logger = logging.getLogger(__name__)

logger.info("Processing user %s", user_id)
logger.error("Failed to save", extra={"user_id": user_id, "error": str(e)})

# ❌ DON'T:
print(f"Processing {user_id}")
logger.info(f"Processing user {user_id}")
```

## Functions and Classes

- **Pure functions preferred** - clear inputs/outputs, no side effects
- **Classes only for**: Data models (Pydantic), external clients, complex state
- **No global state** - pass dependencies explicitly

## Imports

- **Absolute imports**: `from cityhive.domain import User`
- **Group imports**: stdlib, third-party, local (Ruff handles this)
- **No star imports**: `from module import *` forbidden

---

**Reference Implementation:**
- See existing codebase for patterns
- Ruff configuration in [pyproject.toml](mdc:pyproject.toml)
- Use Context7 for framework-specific patterns
