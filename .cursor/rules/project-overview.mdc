---
description: CityHive Project Overview
globs:
alwaysApply: true
---
# CityHive Project Overview

**Context for AI:** This is a Python 3.12 project using clean architecture patterns with domain-driven design.

## Project Structure

- **Domain Layer**: `cityhive/domain/` - Business logic, services, and models
- **Infrastructure Layer**: `cityhive/infrastructure/` - External integrations, database, config
- **Tests**: `tests/unit/` and `tests/integration/` - Comprehensive test coverage required

## Technology Stack

- **Language**: Python 3.12
- **Database**: PostgreSQL + PostGIS
- **Testing**: Pytest with coverage
- **Package Management**: uv (NEVER pip)
- **Linting**: Ruff (configured in pyproject.toml)

## Key Development Principles

- **Clean Architecture**: Separate concerns between domain and infrastructure
- **Type Safety**: Type hints required throughout
- **Test-Driven**: All features need tests
- **Domain-Driven**: Business logic stays in domain layer

## Essential Commands

- **Install dependencies**: `uv add package-name`
- **Run tests**: `uv run pytest ./tests`
- **Lint code**: `uv run ruff check`
- **Format code**: `uv run ruff format`

## Database

- PostgreSQL with PostGIS extensions
- Alembic migrations in `migration/` directory
- Development database via docker-compose

---

**See also:**
- [python-standards.mdc](mdc:.cursor/rules/python-standards.mdc) for coding conventions
- [testing-guidelines.mdc](mdc:.cursor/rules/testing-guidelines.mdc) for test practices
