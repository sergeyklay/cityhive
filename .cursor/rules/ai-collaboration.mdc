---
description: AI Collaboration Guidelines
globs:
alwaysApply: true
---
# AI Collaboration Guidelines

**For AI interactions:** How to work effectively with AI assistance in this codebase.

## Code Analysis Requirements

- **Read existing code first** - understand patterns before making changes
- **Respect existing patterns** - match the established codebase style
- **Minimal changes only** - focus on the specific request, no extra improvements
- **Use Context7** - always research unfamiliar frameworks or patterns

## Code Generation Standards

- **Complete implementations** - no TODO comments or placeholder code
- **Working code only** - test suggestions before proposing
- **Proper imports** - include all necessary import statements
- **Type hints required** - all generated code must have proper typing

## Error Handling in Responses

- **Fix errors, don't apologize** - provide corrected code immediately
- **Explain the fix** - briefly describe what was wrong and why
- **Provide context** - reference relevant files or patterns when fixing

## Codebase Context Awareness

- **Project structure**: Follow clean architecture (web/domain/infrastructure separation)
- **Technology stack**: Python 3.12, aiohttp, Pydantic, SQLAlchemy, PostgreSQL
- **Testing approach**: Pytest with functional style, comprehensive coverage required
- **Dependency management**: uv only, never pip

## Web Application Patterns

- **Application factory**: Use async `create_app()` function pattern
- **Type-safe keys**: Always use `web.AppKey` for application data storage
- **Middleware order**: Logging → Error handling → Routes
- **Database sessions**: Use cleanup contexts for SQLAlchemy async sessions
- **Request handlers**: Follow `async def handler(request: web.Request) -> web.Response`

## Response Formatting

- **Use proper citations**: `12:15:app/components/Todo.tsx` format for code references
- **Concrete examples**: Show actual implementation, not abstract concepts
- **Actionable guidance**: Provide specific steps, not general advice

## Planning and Implementation

- **Understand requirements** - ask clarifying questions if request is ambiguous
- **Propose approach** - outline the plan before implementing
- **Implement incrementally** - make small, focused changes
- **Validate changes** - ensure code fits within existing architecture

## Framework and Library Usage

- **Research first** - use Context7 to understand best practices
- **Follow conventions** - respect framework-specific patterns and idioms
- **Security aware** - consider security implications of all suggestions
- **Performance conscious** - avoid suggestions that degrade performance

## aiohttp Best Practices

- **Use AppKey for storage**: Type-safe application-wide data
- **Cleanup contexts**: Manage resource lifecycle properly
- **Middleware patterns**: Follow aiohttp middleware signature requirements
- **Template integration**: Use aiohttp-jinja2 decorators correctly
- **Health endpoints**: Include monitoring endpoints for production

---

**See also:**
- [AI Integration Guide](mdc:docs/ai-integration.md) for MCP setup and AI tooling
- [Architecture Guide](mdc:docs/architecture.md) for clean architecture patterns
- [CONTRIBUTING.md](mdc:CONTRIBUTING.md) for code review and contribution process
- [Development Guide](mdc:docs/development.md) for commands and workflows

**Key Principle:** Be helpful by understanding the codebase deeply and making targeted, high-quality contributions that fit seamlessly into the existing architecture and patterns.
